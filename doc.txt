INTERSECTION TYPES
they allow us to combine 2 different types
ex: 
type t1 = {
    name: string
}
type t2 = {
    age: number
}
type mixTs = t1 & t2 
const tmp: mixTs // here we are declaring a variable in ts way
tmp = {
    name: 'justin'  // now here when we are assigned a value to tmp
    age: 25         // we should follow the t1 and t2 types
}
this is especially useful  with obj types but can be with others as well
ex: type Combine = string | number
type Numberic = number | boolean

type Universal = Combine & Numberic

TYPE GUARDS
tyoe guards lets us utilize the flexibility union types give us.
ex: let add = (a: Combine, b: Combine) => {
    if (typeof a === 'string' || typeof b === 'string'){
        return a.toString() + b.toString();
    }
    return a + b;
}
above if clause is type gaurd because it is making sure both arguments are the same type.
we can also use type guards for object custom types. as we know Employee and Admin are
object types having name (both of them) and privileges and startDate. so if we assign them to a new variable
as an enum type and use that new variable we should implement type guards. and it is difficult to identify
if an object key exist in custom types so we use 'in' keyword to do that.

type Admin = {
    name: string
    privileges: string[]
}

type Employee = {
    name: string
    startDate: Date
}
type UnknownEmployee = Employee | Admin

let printEmployeeInformation = (emp: UnknownEmployee) => {
    if ('privileges' in emp) {
        console.log('Privileges: ' + emp.privileges);
    }
    if ('startDate' in emp) {
        console.log('startDate:', emp.startDate);
    }
    console.log('Name: ' + emp.name);
}
printEmployeeInformation({name: 'Justin', startDate: new Date()}) 
in type gurads with classes we can use instanceof:
class Car {
    drive() {
        console.log('driving');
    }
}
class Truck {
    drive() {
        console.log('driving a truck');
    }

    loadCargo(amount: number) {
        console.log('loading cargo ' + amount);
    }
}

type Vehicle = Car | Truck 

const v1 = new Car()
const v2 = new Truck()

let useVehicle = (vehicle: Vehicle) => {
    vehicle.drive()
    if ('loadCargo' in vehicle) {
        vehicle.loadCargo(1000)
    }
}

useVehicle(v1)
useVehicle(v2)